

#ifndef __DASHBOARD__H
#define __DASHBOARD__H

#include <Arduino.h>
#include <AsyncTCP.h>
#include <ESPDash.h>
#include <ESPmDNS.h>
#include <MycilaESPConnect.h>
#include <TickTwo.h>
#include <WiFi.h>
#include "environment.h"
#include "oled.h"

void init_dashboard();
void update_dashboard();
void dashboard_ticker_handler();

AsyncWebServer server(80);
ESPDash dashboard(&server, true, "/home");
// TickTwo dashboard_ticker(update_dashboard, 1000, 5);
TickTwo dashboard_ticker(dashboard_ticker_handler, 5000, 0, MILLIS);
String hostname = "smartvent";
uint32_t lastLog = 0;

/*
  Dashboard Cards
  Format - (Dashboard Instance, Card Type, Card Name, Card Symbol(optional) )
*/
Card temperature(&dashboard, TEMPERATURE_CARD, "Temperature", "Â°C");
Card humidity(&dashboard, HUMIDITY_CARD, "Humidity", "%");
Card co2(&dashboard, GENERIC_CARD, "CO2", "ppm");
Card reset_wifi_btn(&dashboard, BUTTON_CARD, "Reset WiFi", "wifi");

void init_dashboard() {
  // serve your logo here
  server.on("/logo", HTTP_GET, [&](AsyncWebServerRequest* request) {
    // AsyncWebServerResponse* response = request->beginResponse_P(200, "image/png", _binary_data_logo_icon_png_gz_start,
    // _binary_data_logo_icon_png_gz_end - _binary_data_logo_icon_png_gz_start);
    AsyncWebServerResponse* response = request->beginResponse_P(200, "image/png", "", 0);
    response->addHeader("Content-Encoding", "gzip");
    response->addHeader("Cache-Control", "public, max-age=900");
    request->send(response);
  });

  // serve your home page here
  // server.on("/home", HTTP_GET, [&](AsyncWebServerRequest* request) { request->send(200, "text/plain", "Hello World!"); });

  // clear persisted config
  server.on("/clear", HTTP_GET, [&](AsyncWebServerRequest* request) {
    Serial.println("Clearing configuration...");
    ESPConnect.clearConfiguration();
    request->send(200);
  });

  // add a rewrite which is only applicable in AP mode and STA mode, but not in Captive Portal mode
  server.rewrite("/", "/home").setFilter([](AsyncWebServerRequest* request) { return ESPConnect.getState() != ESPConnectState::PORTAL_STARTED; });

  // network state listener is required here in async mode
  ESPConnect.listen([](ESPConnectState previous, ESPConnectState state) {
    JsonDocument doc;
    ESPConnect.toJson(doc.to<JsonObject>());
    serializeJsonPretty(doc, Serial);
    Serial.println();

    switch (state) {
      case ESPConnectState::NETWORK_CONNECTED:
      case ESPConnectState::AP_STARTED:
        server.begin();
        // ArduinoOTA.setHostname(hostname.c_str());
        // ArduinoOTA.setMdnsEnabled(true);
        // ArduinoOTA.begin();
        MDNS.begin(hostname.c_str());
        MDNS.addService("http", "tcp", 80);
        break;

      case ESPConnectState::NETWORK_DISCONNECTED:
        server.end();
      default:
        break;
    }
  });

  ESPConnect.setAutoRestart(true);
  ESPConnect.setBlocking(false);
  ESPConnect.setCaptivePortalTimeout(180);
  ESPConnect.setConnectTimeout(10);

  Serial.println("====> Trying to connect to saved WiFi or will start portal in the background...");

  ESPConnect.begin(&server, hostname.c_str(), "SmartVent AP", "capstone");

  //*************************************************************

  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  dashboard_ticker.start();

  reset_wifi_btn.attachCallback([&](bool value) {
    Serial.println("[Card1] Button Callback Triggered: " + String((value) ? "true" : "false"));
    reset_wifi_btn.update(value);
    dashboard.sendUpdates();
    ESPConnect.clearConfiguration();
    ESP.restart();
  });
}

void update_dashboard() {
  dashboard_ticker.update();
  reset_wifi_btn.update(true);

  ESPConnect.loop();

  if (millis() - lastLog > 5000) {
    JsonDocument doc;
    ESPConnect.toJson(doc.to<JsonObject>());
    serializeJson(doc, Serial);
    Serial.println();
    lastLog = millis();
  }
}

void dashboard_ticker_handler() {
  temperature.update(env.temperature);
  humidity.update(env.humidity);
  co2.update(env.co2);
  dashboard.sendUpdates();

  Serial.println("Dashboard updated");
}

void connect_screen() {
  static const unsigned char image_Scanning_bits[] U8X8_PROGMEM = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x56, 0x05, 0x60, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x81, 0x0a, 0x80, 0x00, 0x00, 0x00, 0x80,
      0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x80, 0x00, 0x15, 0x00, 0x01, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x40, 0x00, 0x38, 0x00, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x20, 0x00, 0x74, 0x00, 0x04, 0x00, 0x00, 0x40,
      0x82, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x20, 0x00, 0x68, 0x00, 0x04, 0x00, 0x00, 0x20, 0x82, 0x02, 0x06, 0x00, 0x00, 0x21, 0x00, 0x00,
      0x10, 0x00, 0xd0, 0xe0, 0x0f, 0x00, 0x00, 0x20, 0x82, 0x02, 0x0a, 0x0c, 0x80, 0x20, 0x08, 0x00, 0x10, 0x00, 0xa0, 0x1c, 0x10, 0x00, 0x00, 0x20,
      0x82, 0x02, 0x0a, 0x14, 0x80, 0x10, 0x04, 0x00, 0x08, 0xe0, 0xd3, 0x03, 0x10, 0x00, 0x00, 0x10, 0x82, 0x02, 0x0a, 0x14, 0x80, 0x10, 0x02, 0x00,
      0x08, 0x90, 0xa7, 0x40, 0x24, 0x00, 0x00, 0x10, 0x82, 0x02, 0x0a, 0x14, 0x80, 0x10, 0x02, 0x00, 0x08, 0xc8, 0x7f, 0x84, 0x28, 0x00, 0x00, 0x10,
      0x84, 0x02, 0x0a, 0xff, 0x80, 0x10, 0x02, 0x00, 0x88, 0x67, 0x3e, 0x88, 0x28, 0x00, 0x00, 0x10, 0x84, 0xfa, 0xff, 0xff, 0x80, 0x10, 0x02, 0x00,
      0x44, 0x64, 0x2e, 0x88, 0x28, 0x00, 0x00, 0x10, 0xfc, 0xaf, 0xff, 0x15, 0x80, 0x10, 0x04, 0x00, 0x44, 0xe4, 0x2f, 0x88, 0x2a, 0x00, 0x00, 0x18,
      0xd4, 0xdf, 0x1f, 0x14, 0x80, 0x20, 0x08, 0x00, 0x44, 0xe4, 0x2f, 0x50, 0xff, 0x00, 0xfe, 0x1f, 0xec, 0x3f, 0x0a, 0x14, 0x00, 0x21, 0x00, 0x00,
      0x44, 0xc4, 0x2f, 0xea, 0x00, 0x01, 0x01, 0x1a, 0xfc, 0x02, 0x0a, 0x14, 0x00, 0x41, 0x00, 0x00, 0x84, 0x88, 0x2f, 0x1d, 0x00, 0x82, 0x7d, 0x1e,
      0x84, 0x02, 0x0a, 0x18, 0x00, 0x82, 0x00, 0x00, 0x86, 0x1f, 0xc6, 0x06, 0x00, 0x84, 0x7d, 0x16, 0x84, 0x02, 0x0a, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x46, 0xf5, 0xc3, 0x01, 0x00, 0x44, 0x01, 0x22, 0x84, 0x02, 0x0c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x87, 0x0a, 0x7c, 0x00, 0x00, 0x44, 0x03, 0x22,
      0x88, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x45, 0x05, 0x08, 0x00, 0x7e, 0xa4, 0x03, 0x42, 0x88, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x86, 0x06, 0x00, 0xc0, 0x81, 0xa5, 0x07, 0x42, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x30, 0x00, 0xd2, 0xff, 0x81,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0c, 0x00, 0xd2, 0x1f, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x80, 0x00, 0x03, 0x00, 0xd1, 0x1f, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0xe1, 0x00, 0x80, 0xe9, 0x0f, 0x00,
      0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1e, 0x00, 0xc0, 0xe8, 0x0f, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x06, 0x00, 0x00, 0x00, 0x70, 0xee, 0x0f, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0xf9, 0x0f, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xaa, 0x9f, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x40, 0x55, 0xfd, 0x5f, 0xf0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0xea, 0xff, 0x3f, 0xe0, 0x17, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0xd5, 0xff, 0x1f, 0xe0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x02, 0x80, 0xaa, 0xff, 0x0f, 0xe0, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x55, 0x55, 0x03, 0xf0, 0x15, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xaa, 0xaa, 0x00, 0xb0, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x54, 0x75, 0x00, 0x58, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xa8, 0x0f, 0x00, 0xa8, 0x06, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x7c, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0xd7, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x80, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x15, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xaa, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  u8g2.clearBuffer();
  u8g2.setBitmapMode(1);
  u8g2.setFontMode(1);
  u8g2.drawXBMP(0, 12, 123, 52, image_Scanning_bits);
  u8g2.sendBuffer();
}

#endif